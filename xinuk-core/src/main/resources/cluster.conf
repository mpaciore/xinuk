akka {

  loggers = [akka.event.slf4j.Slf4jLogger]
  loglevel = debug

  actor {
    provider = akka.cluster.ClusterActorRefProvider
    allow-java-serialization = off

    kryo {
      kryo-custom-serializer-init = pl.edu.agh.xinuk.config.KryoInit

      # Possibles values for type are: graph or nograph
      # graph supports serialization of object graphs with shared nodes
      # and cyclic references, but this comes at the expense of a small
      # overhead nograph does not support object graphs with shared nodes,
      # but is usually faster
      type = nograph

      # Possible values for idstrategy are:
      # default, explicit, incremental, automatic
      #
      # default - slowest and produces bigger serialized representation.
      # Contains fully-qualified class names (FQCNs) for each class. Note
      # that selecting this strategy does not work in version 0.3.2, but
      # is available from 0.3.3 onward.
      #
      # explicit - fast and produces compact serialized representation.
      # Requires that all classes that will be serialized are pre-registered
      # using the "mappings" and "classes" sections. To guarantee that both
      # sender and receiver use the same numeric ids for the same classes it
      # is advised to provide exactly the same entries in the "mappings"
      # section.
      #
      # incremental - fast and produces compact serialized representation.
      # Support optional pre-registering of classes using the "mappings"
      # and "classes" sections. If class is not pre-registered, it will be
      # registered dynamically by picking a next available id To guarantee
      # that both sender and receiver use the same numeric ids for the same
      # classes it is advised to pre-register them using at least the "classes" section.
      #
      # automatic -  use the pre-registered classes with fallback to FQCNs
      # Contains fully-qualified class names (FQCNs) for each non pre-registered
      # class in the "mappings" and "classes" sections. This strategy was
      # added in version 0.4.1 and will not work with the previous versions
      idstrategy = explicit

      # Define a default size for byte buffers used during serialization
      buffer-size = 4096

      # The serialization byte buffers are doubled as needed until they
      # exceed max-buffer-size and an exception is thrown. Can be -1
      # for no maximum.
      max-buffer-size = -1

      # If set, akka uses manifests to put a class name
      # of the top-level object into each message
      use-manifests = false

      # If set it will use the UnsafeInput and UnsafeOutput
      # Kyro IO instances. Please note that there is no guarantee
      # for backward/forward compatibility of unsafe serialization.
      # It is also not compatible with the safe-serialized values.
      # The unsafe IO usually creates bugger payloads but is faster
      # for some types, e.g. native arrays.
      use-unsafe = true

      # The transformations that have be done while serialization
      # Supported transformations: compression and encryption
      # accepted values(comma separated if multiple): off | lz4 | deflate | aes
      # Transformations occur in the order they are specified
      post-serialization-transformations = lz4

      # Log implicitly registered classes. Useful, if you want to know all
      # classes which are serialized. You can then use this information in
      # the mappings and/or classes sections
      implicit-registration-logging = false

      # If enabled, Kryo logs a lot of information about serialization process.
      # Useful for debugging and lowl-level tweaking
      kryo-trace = false

      # If enabled, allows Kryo to resolve subclasses of registered Types.
      #
      # This is primarily useful when idstrategy is set to "explicit". In this
      # case, all classes to be serialized must be explicitly registered. The
      # problem is that a large number of common Scala and Akka types (such as
      # Map and ActorRef) are actually traits that mask a large number of
      # specialized classes that deal with various situations and optimizations.
      # It isn't straightforward to register all of these, so you can instead
      # register a single supertype, with a serializer that can handle *all* of
      # the subclasses, and the subclasses get serialized with that.
      #
      # Use this with care: you should only rely on this when you are confident
      # that the superclass serializer covers all of the special cases properly.
      resolve-subclasses = false

      # Define a set of fully qualified class names for
      # classes to be used for serialization.
      # The ids for those classes will be assigned automatically,
      # but respecting the order of declaration in this section
      #
      # This section is ignored for idstrategy="default" and optional for
      # all other.
      classes = ${xinuk.classes} [
        "scala.collection.immutable.Vector"
        "scala.collection.immutable.HashMap$HashTrieMap"
        "scala.collection.immutable.Map$Map1"
        "scala.collection.immutable.Map$Map2"
        "scala.collection.immutable.Map$Map3"
        "scala.collection.immutable.Map$Map4"
        "scala.collection.immutable.HashSet$HashTrieSet"
        "scala.collection.immutable.HashSet$HashSet1"
        "scala.collection.immutable.Set$Set1"
        "scala.collection.immutable.Set$Set2"
        "scala.collection.immutable.Set$Set3"
        "scala.collection.immutable.Set$Set4"
        "scala.collection.immutable.Nil$"
        "scala.collection.immutable.$colon$colon"

        "scala.Some"
        "scala.None$"
        "scala.Tuple2"

        "pl.edu.agh.xinuk.simulation.WorkerActor$MsgWrapper"
        "pl.edu.agh.xinuk.simulation.WorkerActor$WorkerInitialized"
        "pl.edu.agh.xinuk.simulation.WorkerActor$SubscribeGridInfo"
        "pl.edu.agh.xinuk.simulation.WorkerActor$RemotePlans"
        "pl.edu.agh.xinuk.simulation.WorkerActor$RemoteConsequences"
        "pl.edu.agh.xinuk.simulation.WorkerActor$RemoteSignal"
        "pl.edu.agh.xinuk.simulation.WorkerActor$RemoteCellContents"

        "pl.edu.agh.xinuk.gui.GuiActor$GridInfo"

        "pl.edu.agh.xinuk.model.grid.GridWorldShard"
        "pl.edu.agh.xinuk.model.grid.GridCellId"
        "pl.edu.agh.xinuk.model.grid.GridDirection$Top$"
        "pl.edu.agh.xinuk.model.grid.GridDirection$TopRight$"
        "pl.edu.agh.xinuk.model.grid.GridDirection$Right$"
        "pl.edu.agh.xinuk.model.grid.GridDirection$BottomRight$"
        "pl.edu.agh.xinuk.model.grid.GridDirection$Bottom$"
        "pl.edu.agh.xinuk.model.grid.GridDirection$BottomLeft$"
        "pl.edu.agh.xinuk.model.grid.GridDirection$Left$"
        "pl.edu.agh.xinuk.model.grid.GridDirection$TopLeft$"

        "pl.edu.agh.xinuk.algorithm.TargetedPlan"
        "pl.edu.agh.xinuk.algorithm.TargetedStateUpdate"

        "pl.edu.agh.xinuk.model.WorkerId"
        "pl.edu.agh.xinuk.model.Cell"
        "pl.edu.agh.xinuk.model.CellState"
        "pl.edu.agh.xinuk.model.Obstacle$"
        "pl.edu.agh.xinuk.model.Empty$"
        "pl.edu.agh.xinuk.model.Signal"
        "pl.edu.agh.xinuk.model.SignalMap"
      ]
    }

    serializers {
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "pl.edu.agh.xinuk.simulation.WorkerActor$MsgWrapper" = kryo
      "pl.edu.agh.xinuk.simulation.WorkerActor$WorkerInitialized" = kryo
      "pl.edu.agh.xinuk.simulation.WorkerActor$SubscribeGridInfo" = kryo
      "pl.edu.agh.xinuk.simulation.WorkerActor$RemotePlans" = kryo
      "pl.edu.agh.xinuk.simulation.WorkerActor$RemoteConsequences" = kryo
      "pl.edu.agh.xinuk.simulation.WorkerActor$RemoteSignal" = kryo
      "pl.edu.agh.xinuk.simulation.WorkerActor$RemoteCellContents" = kryo

      "pl.edu.agh.xinuk.gui.GuiActor$GridInfo" = kryo
    }
  }

  remote {
    log-remote-lifecycle-events = off
    maximum-payload-bytes = 30000000b
    netty.tcp {
      hostname = ${clustering.ip}
      port = ${clustering.port}
      message-frame-size = 30000000b
      send-buffer-size = 30000000b
      receive-buffer-size = 30000000b
      maximum-frame-size = 30000000b
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://"${application.name}"@"${clustering.supervisor.ip}":"${clustering.supervisor.port}
    ]
    min-nr-of-members = ${clustering.min-nr-of-members}
    failure-detector {
      heartbeat-interval = 3s
      acceptable-heartbeat-pause = 15s
    }
  }

}